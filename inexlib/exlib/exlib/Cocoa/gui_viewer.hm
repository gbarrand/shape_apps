// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_Cocoa_gui_viewer_hm
#define exlib_Cocoa_gui_viewer_hm

#include "session.hm"
#include "GLView.hm"

#if MAC_OS_X_VERSION_MAX_ALLOWED <= 1050
@interface exlib_Cocoa_gui_viewer_win_delegate : NSObject {
#else
@interface exlib_Cocoa_gui_viewer_win_delegate : NSObject<NSWindowDelegate> {
#endif
  inlib::sg::gui_viewer* m_viewer;
}
- (id)init:(inlib::sg::gui_viewer*)a_viewer;
- (void)dealloc;
- (void)windowWillClose:(NSNotification*)a_not;
@end
@implementation exlib_Cocoa_gui_viewer_win_delegate
- (id)init:(inlib::sg::gui_viewer*)a_viewer {
  if(self = [super init]) {}
  m_viewer = a_viewer;
  return self;
}
- (void)dealloc {[super dealloc];}
- (void)windowWillClose:(NSNotification*)a_not {
  m_viewer->set_to_exit();
  (void)a_not;
}
@end

#include "../sg/pv_holder"
#include "../sg/GL_action"

#include "../jpeg"
#include "../png"
#include <inlib/cbk/out>
//#include "../zlib"

//#include "gui_dispatcher"

#include <inlib/path_env>
#include <inlib/sg/gui_viewer>

#include <inlib/sg/ortho>
#include <inlib/sg/head_light>

#include <inlib/cbk/background_popup>
#include <inlib/cbk/image_popup>
//#include <inlib/cbk/sg_client>

namespace exlib {
namespace Cocoa {

//IMPORTANT : pv_holder must come first.

class gui_viewer
:protected sg::pv_holder
,public inlib::sg::gui_viewer
//,public inlib::sg::view_sg_client
{
  typedef exlib::sg::pv_holder parent_pv_holder;
  typedef inlib::sg::gui_viewer parent;
//typedef inlib::sg::view_sg_client parent_sg_client;
//public:
  //virtual void* cast(const std::string& a_class) const {
  //  if(void* p = inlib::cmp_cast<parent_sg_client>(this,a_class)) return p;
  //  return parent::cast(a_class);
  //}
public: //exlib::sg::viewer
  virtual bool set_cursor_shape(inlib::sg::cursor_shape a_shape) {
    if(!parent::set_cursor_shape(a_shape)) return false;
    if(a_shape==inlib::sg::cursor_default) {
      if(!m_GLView) return false;
      [m_GLView set_cursor:inlib::sg::cursor_default];
      //[m_GLView.window invalidateCursorRectsForView:m_GLView];
      return true;
    } else if(a_shape==inlib::sg::cursor_target) {
      if(!m_GLView) return false;
      [m_GLView set_cursor:inlib::sg::cursor_target];
      //[m_GLView.window invalidateCursorRectsForView:m_GLView];
      return true;
    } else {
      return false;
    }
  }
private:
  virtual unsigned char* get_pixels(unsigned int a_w,unsigned int a_h,bool a_rgbas = true) {
    if(a_rgbas) {
      return sg::GL_manager::get_rgbas(a_w,a_h);
    } else {
      return sg::GL_manager::get_rgbs(a_w,a_h);
    }
  }
  virtual void win_render() { //ui::win_render()
    if(!m_ww) return;
    if(!m_wh) return;
    if(!m_win) return;
    if(!m_GLView) return;
    [[m_GLView openGLContext] makeCurrentContext];

    check_gui_cursor(); //IMPORTANT.
    if(m_mgr_gra.begin_render(0,0,m_ww,m_wh,
                              m_clear_color.r(),
                              m_clear_color.g(),
                              m_clear_color.b(),
                              m_clear_color.a())) {
      sg::GL_action action(m_mgr_gra,m_out,m_ww,m_wh);
      action.state().m_use_gsto = m_use_gsto;
      m_sg.render(action);
      if(!action.end()) { //check that matrices stack are ok.
        m_out << "exlib::sg::viewer : bad gl_action end." << std::endl;
      }

      after_render();
      m_mgr_gra.end_render();
    }

    [[m_GLView openGLContext] flushBuffer];
  }

protected:
  virtual inlib::sg::node* create_main_menu() {
    //m_out << "pmx::main::create_home_menu : " << std::endl;

    inlib::sg::list* list = new inlib::sg::list(parent::ttf());
    set_style(*list);

  //inlib::sg::add_image_item(*this,*list,inlib::sg::s_to_serv(),"connect_to_wall.jpg",inlib::cbk::action_sg_client_main);

  //inlib::sg::add_image_item(*this,*list,"export","document_export.jpg",inlib::out::action_main);
    inlib::sg::add_image_item(*this,*list,"utils","tools.jpg",inlib::sg::action_utils);

    if(!inlib::device::stop_app_button()){
      inlib::sg::add_image_item(*this,*list,"exit","application_exit.jpg",inlib::sg::action_set_to_exit);
    }

    return list;
  }
public:
  gui_viewer(session& a_session,
              int a_x = 0,int a_y = 0,
              unsigned int a_width = 500,unsigned int a_height = 500,
              const std::string& a_win_title = "")
  :parent_pv_holder(a_session.out())
  ,parent(a_session.out(),
          parent_pv_holder::gra_mgr(),parent_pv_holder::ttf(),parent_pv_holder::selection(),
          a_width,a_height)
//,parent_sg_client(a_session.out(),a_win_title,".",exlib::compress_buffer,parent_pv_holder::ttf())
  ,m_session(a_session)
  ,m_win(0)
  ,m_GLView(0)
  {
    //////////////////////////////////////////////////////////
    /// windowing : //////////////////////////////////////////
    //////////////////////////////////////////////////////////
    //if(!m_session.display()) return; //throw
    m_win = m_session.create_window(a_win_title.c_str(),a_x,a_y,a_width,a_height);
    if(!m_win) return; //throw

    m_png_writer = exlib::png::write;
    m_jpeg_writer = exlib::jpeg::write;

    exlib_Cocoa_gui_viewer_win_delegate* _win_delegate = [[exlib_Cocoa_gui_viewer_win_delegate alloc] init:this];
    [m_win setDelegate:_win_delegate];

    NSRect rect;
    rect = [m_win frame];
    rect = [m_win contentRectForFrameRect:rect]; //window content true size.
    m_GLView = [[exlib_Cocoa_GLView alloc] init:rect viewer:this];
    [m_win setContentView:m_GLView];
    [m_GLView release];

    inlib::cbk::move_manip::add_cbks(scene(),*this,a_session.out(),scene(),false);
    scene().up_cbks().add(new inlib::cbk::viewer_popup(*this));

#include "../style_common.icc"

    push_home();
  }
  virtual ~gui_viewer() {
    if(m_win) {
      //m_session.remove_dispatchers_with_window(m_win);
      m_session.delete_window(m_win);
      //m_session.sync();
    }
  }
protected:
  gui_viewer(const gui_viewer& a_from)
  :parent_pv_holder(a_from)
  ,parent(a_from)
//,parent_sg_client(a_from)
  ,m_session(a_from.m_session)
  ,m_win(a_from.m_win)
  ,m_selection(a_from.m_selection)
  {}
  gui_viewer& operator=(const gui_viewer& a_from){
    parent::operator=(a_from);
    m_win = a_from.m_win;
    return *this;
  }
public:
  bool has_window() const {return m_win?true:false;} //for SWIG

  bool show() {
    if(!m_win) return false;
    m_session.show_window(m_win);
    return true;
  }

  bool steer() {
    while(!to_exit()) {
      if(num_cbks()) {
        do_works();
	//if(!m_session.event_pending(is)) return false;
        //if(!is) continue;
      }
      //if(!m_session.next_event()) return false;
      if(!m_session.sync()) return false;
    }
    return true;
  }
protected:
  session& m_session;
  NSWindow* m_win;
  exlib_Cocoa_GLView* m_GLView;
  inlib::sg::selection m_selection;
};

}}

//exlib_build_use inlib inlib_glutess freetype
//exlib_build_use png jpeg zlib

//exlib_build_use Cocoa AGL

#endif

